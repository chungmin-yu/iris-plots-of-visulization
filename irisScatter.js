(function (d3) {
  'use strict';

  //choose x-axis and y-axis buttons 
  const selectButton = (selection, props) => {
      const {
        options,
        onClicked,
        selected
      } = props;
      
      var select = selection.selectAll('select').data([null]);
      select = select.enter().append('select')
        .merge(select)
        .on('change', function() { onClicked(this.value);  
      });
      
      const option = select.selectAll('option').data(options);
      option.enter().append('option')
        .merge(option)
        .attr('value', d => d)
        .property('selected', d => d === selected)
        .text(d => d);
    };

  const svg = d3.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');

  var buttonX;
  var buttonY;
  var alldata;

  //initialize x-axis and y-axis
  buttonX = 'sepal length';
  buttonY = 'sepal width';


  const onButtonX = column => {
    buttonX = column;  
    svg.selectAll("*").remove();
    render(alldata);
  };

  const onButtonY = column => {
  	buttonY = column; 
    svg.selectAll("*").remove();
    render(alldata);
  };

  const render = data => {
  const title = 'Iris Scatter Plot';
    
    /*const xAxisLabel = 'sepal length';
    const xValue = d => d.sepal_length;  
    const yAxisLabel = 'sepal width';
    const yValue = d => d.sepal_width;*/
    
    var xValue;
    var xAxisLabel;
    var yValue;
    var yAxisLabel;
    
    //let x-axis be the one we choosed 
    if (buttonX == 'sepal length'){
    	xAxisLabel = 'sepal length';
    }else if(buttonX == 'sepal width'){
    	xAxisLabel = 'sepal width';
    }else if(buttonX == 'petal length'){
    	xAxisLabel = 'petal length';
    }else if(buttonX == 'petal width'){
    	xAxisLabel = 'petal width';
    } xValue = function(d){if(d[xAxisLabel]>0) return d[xAxisLabel]};
    
    
    //let y-axis be the one we choosed
    if (buttonY == 'sepal length'){
    	yAxisLabel = 'sepal length';
    }else if(buttonY == 'sepal width'){
    	yAxisLabel = 'sepal width';
    }else if(buttonY == 'petal length'){
    	yAxisLabel = 'petal length';
    }else if(buttonY == 'petal width'){
    	yAxisLabel = 'petal width';
    } yValue = function(d){if(d[yAxisLabel]>0) return d[yAxisLabel]};
    
    const circleRadius = 10; 
    
    //map Iris's class to color
    const colorValue = d => d.class;
    const colorScale = d3.scaleOrdinal()
      .domain(data.map(colorValue))
      .range(['#E6842A', '#137B80', '#28004D']);

    
    const margin = { top: 80, right: 200, bottom: 100, left: 150 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();
    
    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);
    
    const xAxis = d3.axisBottom(xScale)
      .tickSize(-innerHeight)
      .tickPadding(15);
    
    const yAxis = d3.axisLeft(yScale)
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.append('g').call(yAxis);
    yAxisG.selectAll('.domain').remove();
    
    yAxisG.append('text')
        .attr('class', 'axis-label')
        .attr('y', -93)
        .attr('x', -innerHeight / 2)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
        .text(yAxisLabel);
    
    const xAxisG = g.append('g').call(xAxis)
      .attr('transform', `translate(0,${innerHeight})`);
    
    xAxisG.select('.domain').remove();
    
    xAxisG.append('text')      
        .attr('class', 'axis-label')
        .attr('y', 75)
        .attr('x', innerWidth / 2)
        .attr('fill', 'black')
        .text(xAxisLabel);
    
    g.selectAll('circle').data(data)
      .enter().append('circle').filter(function(d){return xValue(d) > 0 && yValue(d) > 0})
        .attr('cy', d => yScale(yValue(d)))
        .attr('cx', d => xScale(xValue(d)))
        .attr('r', circleRadius)
    		//.attr('fill', 'blue')
    		.attr('fill', d => colorScale(colorValue(d)));
    
    g.append('text')
        .attr('class', 'title')
    		.attr('x', 105)
        .attr('y', -10)
        .text(title);
    
    
    //typesetting
    g.append('text')
      .attr('y', 195)
      .attr('x', 640)
      .attr('fill', '#635F5D')
      .attr('font-size', '1.9em')
      .text('Axis Select');
    g.append('text')
      .attr('y', 235)
      .attr('x', 635)
      .attr('fill', '#635F5D')
      .attr('font-size', '1em')
      .text('X axis:');
    g.append('text')
      .attr('y', 275)
      .attr('x', 635)
      .attr('fill', '#635F5D')
      .attr('font-size', '1em')
      .text('Y axis:');

    g.append('text')
    		.attr('y', 35)
    		.attr('x', 645)
    		.attr('fill', '#635F5D')
    		.attr('font-size', '1.9em')
    		.text('Iris Class');
    
    g.append('circle')
    		.attr('cy', 65)
    		.attr('cx', 640)
    		.attr('r', circleRadius)
    		.attr('fill', '#E6842A');   
    g.append('text')
    		.attr('y', 72)
    		.attr('x', 660)
    		.attr('fill', '#635F5D')
    		.attr('font-size', '1.3em')
    		.text('Iris-setosa');
    
    g.append('circle')
    		.attr('cy', 95)
    		.attr('cx', 640)
    		.attr('r', circleRadius)
    		.attr('fill', '#137B80');   
    g.append('text')
    		.attr('y', 102)
    		.attr('x', 660)
    		.attr('fill', '#635F5D')
    		.attr('font-size', '1.3em')
    		.text('Iris-versicolor');
    
    g.append('circle')
    		.attr('cy', 125)
    		.attr('cx', 640)
    		.attr('r', circleRadius)
    		.attr('fill', '#28004D');   
    g.append('text')
    		.attr('y', 132)
    		.attr('x', 660)
    		.attr('fill', '#635F5D')
    		.attr('font-size', '1.3em')
    		.text('Iris-virginica');
      
    
    //call select
    d3.select('#selectButtonX')
      .call(selectButton, {
        options: data.columns.filter(column =>
          column !== 'class'
        ),
        onClicked: onButtonX,
        selected: buttonX
    });
    
    d3.select('#selectButtonY')
      .call(selectButton, {
        options: data.columns.filter(column =>
          column !== 'class'
        ),
        onClicked: onButtonY,
        selected: buttonY
    });  

  };

  d3.csv('https://raw.githubusercontent.com/chungmin-yu/iris-plots-of-visulization/main/iris.csv').then(data => {
      alldata = data;
      data.forEach(d => {     
        d.sepal_length = +d['sepal length'];
        d.sepal_width = +d['sepal width'];
        d.petal_length = +d['petal length'];
        d.petal_width = +d['petal width'];
        d.class = d['class'];
      });
      render(alldata);
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,